type AggregateProduct {
    count: Int!
}

type AggregateUser {
    count: Int!
}

type BatchPayload {
    count: Long!
}

scalar DateTime

scalar Long

type Mutation {
    createProduct(data: ProductCreateInput!): Product!
    updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
    updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
    upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
    deleteProduct(where: ProductWhereUniqueInput!): Product
    deleteManyProducts(where: ProductWhereInput): BatchPayload!
    createUser(data: UserCreateInput!): User!
    updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
    updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
    upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
    deleteUser(where: UserWhereUniqueInput!): User
    deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

interface Node {
    id: ID!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

type Product {
    id: ID!
    name: String!
    latinName: String!
    variety: String!
    category: String!
    description: String!
    price: Float!
    createDate: DateTime!
    height: Float!
    destinationCountry: String!
    image: String!
}

type ProductConnection {
    pageInfo: PageInfo!
    edges: [ProductEdge]!
    aggregate: AggregateProduct!
}

input ProductCreateInput {
    id: ID
    name: String!
    latinName: String!
    variety: String!
    category: String!
    description: String!
    price: Float!
    createDate: DateTime!
    height: Float!
    destinationCountry: String!
    image: String!
}

type ProductEdge {
    node: Product!
    cursor: String!
}

enum ProductOrderByInput {
    id_ASC
    id_DESC
    name_ASC
    name_DESC
    latinName_ASC
    latinName_DESC
    variety_ASC
    variety_DESC
    category_ASC
    category_DESC
    description_ASC
    description_DESC
    price_ASC
    price_DESC
    createDate_ASC
    createDate_DESC
    height_ASC
    height_DESC
    destinationCountry_ASC
    destinationCountry_DESC
    image_ASC
    image_DESC
}

type ProductPreviousValues {
    id: ID!
    name: String!
    latinName: String!
    variety: String!
    category: String!
    description: String!
    price: Float!
    createDate: DateTime!
    height: Float!
    destinationCountry: String!
    image: String!
}

type ProductSubscriptionPayload {
    mutation: MutationType!
    node: Product
    updatedFields: [String!]
    previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: ProductWhereInput
    AND: [ProductSubscriptionWhereInput!]
    OR: [ProductSubscriptionWhereInput!]
    NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateInput {
    name: String
    latinName: String
    variety: String
    category: String
    description: String
    price: Float
    createDate: DateTime
    height: Float
    destinationCountry: String
    image: String
}

input ProductUpdateManyMutationInput {
    name: String
    latinName: String
    variety: String
    category: String
    description: String
    price: Float
    createDate: DateTime
    height: Float
    destinationCountry: String
    image: String
}

input ProductWhereInput {
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    name: String
    name_not: String
    name_in: [String!]
    name_not_in: [String!]
    name_lt: String
    name_lte: String
    name_gt: String
    name_gte: String
    name_contains: String
    name_not_contains: String
    name_starts_with: String
    name_not_starts_with: String
    name_ends_with: String
    name_not_ends_with: String
    latinName: String
    latinName_not: String
    latinName_in: [String!]
    latinName_not_in: [String!]
    latinName_lt: String
    latinName_lte: String
    latinName_gt: String
    latinName_gte: String
    latinName_contains: String
    latinName_not_contains: String
    latinName_starts_with: String
    latinName_not_starts_with: String
    latinName_ends_with: String
    latinName_not_ends_with: String
    variety: String
    variety_not: String
    variety_in: [String!]
    variety_not_in: [String!]
    variety_lt: String
    variety_lte: String
    variety_gt: String
    variety_gte: String
    variety_contains: String
    variety_not_contains: String
    variety_starts_with: String
    variety_not_starts_with: String
    variety_ends_with: String
    variety_not_ends_with: String
    category: String
    category_not: String
    category_in: [String!]
    category_not_in: [String!]
    category_lt: String
    category_lte: String
    category_gt: String
    category_gte: String
    category_contains: String
    category_not_contains: String
    category_starts_with: String
    category_not_starts_with: String
    category_ends_with: String
    category_not_ends_with: String
    description: String
    description_not: String
    description_in: [String!]
    description_not_in: [String!]
    description_lt: String
    description_lte: String
    description_gt: String
    description_gte: String
    description_contains: String
    description_not_contains: String
    description_starts_with: String
    description_not_starts_with: String
    description_ends_with: String
    description_not_ends_with: String
    price: Float
    price_not: Float
    price_in: [Float!]
    price_not_in: [Float!]
    price_lt: Float
    price_lte: Float
    price_gt: Float
    price_gte: Float
    createDate: DateTime
    createDate_not: DateTime
    createDate_in: [DateTime!]
    createDate_not_in: [DateTime!]
    createDate_lt: DateTime
    createDate_lte: DateTime
    createDate_gt: DateTime
    createDate_gte: DateTime
    height: Float
    height_not: Float
    height_in: [Float!]
    height_not_in: [Float!]
    height_lt: Float
    height_lte: Float
    height_gt: Float
    height_gte: Float
    destinationCountry: String
    destinationCountry_not: String
    destinationCountry_in: [String!]
    destinationCountry_not_in: [String!]
    destinationCountry_lt: String
    destinationCountry_lte: String
    destinationCountry_gt: String
    destinationCountry_gte: String
    destinationCountry_contains: String
    destinationCountry_not_contains: String
    destinationCountry_starts_with: String
    destinationCountry_not_starts_with: String
    destinationCountry_ends_with: String
    destinationCountry_not_ends_with: String
    image: String
    image_not: String
    image_in: [String!]
    image_not_in: [String!]
    image_lt: String
    image_lte: String
    image_gt: String
    image_gte: String
    image_contains: String
    image_not_contains: String
    image_starts_with: String
    image_not_starts_with: String
    image_ends_with: String
    image_not_ends_with: String
    AND: [ProductWhereInput!]
    OR: [ProductWhereInput!]
    NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
    id: ID
}

type Query {
    product(where: ProductWhereUniqueInput!): Product
    products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
    productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
    user(where: UserWhereUniqueInput!): User
    users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
    usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
    node(id: ID!): Node
}

type Subscription {
    product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
    user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
    id: ID!
    age: Int
    email: String!
    name: String!
}

type UserConnection {
    pageInfo: PageInfo!
    edges: [UserEdge]!
    aggregate: AggregateUser!
}

input UserCreateInput {
    id: ID
    age: Int
    email: String!
    name: String!
}

type UserEdge {
    node: User!
    cursor: String!
}

enum UserOrderByInput {
    id_ASC
    id_DESC
    age_ASC
    age_DESC
    email_ASC
    email_DESC
    name_ASC
    name_DESC
}

type UserPreviousValues {
    id: ID!
    age: Int
    email: String!
    name: String!
}

type UserSubscriptionPayload {
    mutation: MutationType!
    node: User
    updatedFields: [String!]
    previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: UserWhereInput
    AND: [UserSubscriptionWhereInput!]
    OR: [UserSubscriptionWhereInput!]
    NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
    age: Int
    email: String
    name: String
}

input UserUpdateManyMutationInput {
    age: Int
    email: String
    name: String
}

input UserWhereInput {
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    age: Int
    age_not: Int
    age_in: [Int!]
    age_not_in: [Int!]
    age_lt: Int
    age_lte: Int
    age_gt: Int
    age_gte: Int
    email: String
    email_not: String
    email_in: [String!]
    email_not_in: [String!]
    email_lt: String
    email_lte: String
    email_gt: String
    email_gte: String
    email_contains: String
    email_not_contains: String
    email_starts_with: String
    email_not_starts_with: String
    email_ends_with: String
    email_not_ends_with: String
    name: String
    name_not: String
    name_in: [String!]
    name_not_in: [String!]
    name_lt: String
    name_lte: String
    name_gt: String
    name_gte: String
    name_contains: String
    name_not_contains: String
    name_starts_with: String
    name_not_starts_with: String
    name_ends_with: String
    name_not_ends_with: String
    AND: [UserWhereInput!]
    OR: [UserWhereInput!]
    NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
    id: ID
    email: String
}